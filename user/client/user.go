// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package client

import (
	"context"

	"github.com/2103A/message/user"
	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	UserInfo                  = user.UserInfo
	UserLaunchRequest         = user.UserLaunchRequest
	UserLoginRequest          = user.UserLoginRequest
	UserRegisterRequest       = user.UserRegisterRequest
	UserRegisterResponse      = user.UserRegisterResponse
	UserUpdateLoginResponse   = user.UserUpdateLoginResponse
	UserUpdatePasswordRequest = user.UserUpdatePasswordRequest

	User interface {
		// 注册
		UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
		// 登录
		UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
		// 退出登录
		UserLaunch(ctx context.Context, in *UserLaunchRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
		// 修改密码
		UserUpdatePassword(ctx context.Context, in *UserUpdatePasswordRequest, opts ...grpc.CallOption) (*UserUpdateLoginResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// 注册
func (m *defaultUser) UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserRegister(ctx, in, opts...)
}

// 登录
func (m *defaultUser) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserLogin(ctx, in, opts...)
}

// 退出登录
func (m *defaultUser) UserLaunch(ctx context.Context, in *UserLaunchRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserLaunch(ctx, in, opts...)
}

// 修改密码
func (m *defaultUser) UserUpdatePassword(ctx context.Context, in *UserUpdatePasswordRequest, opts ...grpc.CallOption) (*UserUpdateLoginResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserUpdatePassword(ctx, in, opts...)
}
