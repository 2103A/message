// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: goods.proto

package goods

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Goods_Ping_FullMethodName               = "/goods.Goods/Ping"
	Goods_CreateCategory_FullMethodName     = "/goods.Goods/CreateCategory"
	Goods_DeleteCategoryById_FullMethodName = "/goods.Goods/DeleteCategoryById"
	Goods_UpdateCategory_FullMethodName     = "/goods.Goods/UpdateCategory"
	Goods_SearchCategory_FullMethodName     = "/goods.Goods/SearchCategory"
	Goods_CreateGoods_FullMethodName        = "/goods.Goods/CreateGoods"
	Goods_DeleteGoodsById_FullMethodName    = "/goods.Goods/DeleteGoodsById"
	Goods_UpdateGoods_FullMethodName        = "/goods.Goods/UpdateGoods"
	Goods_SearchGoods_FullMethodName        = "/goods.Goods/SearchGoods"
	Goods_CreateGoodsSku_FullMethodName     = "/goods.Goods/CreateGoodsSku"
	Goods_DeleteGoodsSkuById_FullMethodName = "/goods.Goods/DeleteGoodsSkuById"
	Goods_UpdateGoodsSku_FullMethodName     = "/goods.Goods/UpdateGoodsSku"
	Goods_GetGoodsSkuByGoods_FullMethodName = "/goods.Goods/GetGoodsSkuByGoods"
	Goods_GetGoodsSkuById_FullMethodName    = "/goods.Goods/GetGoodsSkuById"
)

// GoodsClient is the client API for Goods service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// 分类
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error)
	DeleteCategoryById(ctx context.Context, in *DeleteCategoryByIdRequest, opts ...grpc.CallOption) (*DeleteCategoryByIdResponse, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error)
	SearchCategory(ctx context.Context, in *ListCategoryRequest, opts ...grpc.CallOption) (*ListCategoryResponse, error)
	// 商品
	CreateGoods(ctx context.Context, in *CreateGoodsRequest, opts ...grpc.CallOption) (*CreateGoodsResponse, error)
	DeleteGoodsById(ctx context.Context, in *DeleteGoodsByIdRequest, opts ...grpc.CallOption) (*DeleteGoodsByIdResponse, error)
	UpdateGoods(ctx context.Context, in *UpdateGoodsRequest, opts ...grpc.CallOption) (*UpdateGoodsResponse, error)
	SearchGoods(ctx context.Context, in *ListGoodsRequest, opts ...grpc.CallOption) (*ListGoodsResponse, error)
	// 规格
	CreateGoodsSku(ctx context.Context, in *CreateGoodsSkuRequest, opts ...grpc.CallOption) (*CreateGoodsSkuResponse, error)
	DeleteGoodsSkuById(ctx context.Context, in *DeleteGoodsSkuByIdRequest, opts ...grpc.CallOption) (*DeleteGoodsSkuByIdResponse, error)
	UpdateGoodsSku(ctx context.Context, in *UpdateGoodsSkuRequest, opts ...grpc.CallOption) (*UpdateGoodsSkuResponse, error)
	GetGoodsSkuByGoods(ctx context.Context, in *GetGoodsSkuByGoodsRequest, opts ...grpc.CallOption) (*GetGoodsSkuByGoodsResponse, error)
	GetGoodsSkuById(ctx context.Context, in *GetGoodsSkuByIdRequest, opts ...grpc.CallOption) (*GetGoodsSkuByIdResponse, error)
}

type goodsClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsClient(cc grpc.ClientConnInterface) GoodsClient {
	return &goodsClient{cc}
}

func (c *goodsClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Goods_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error) {
	out := new(CreateCategoryResponse)
	err := c.cc.Invoke(ctx, Goods_CreateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) DeleteCategoryById(ctx context.Context, in *DeleteCategoryByIdRequest, opts ...grpc.CallOption) (*DeleteCategoryByIdResponse, error) {
	out := new(DeleteCategoryByIdResponse)
	err := c.cc.Invoke(ctx, Goods_DeleteCategoryById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error) {
	out := new(UpdateCategoryResponse)
	err := c.cc.Invoke(ctx, Goods_UpdateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) SearchCategory(ctx context.Context, in *ListCategoryRequest, opts ...grpc.CallOption) (*ListCategoryResponse, error) {
	out := new(ListCategoryResponse)
	err := c.cc.Invoke(ctx, Goods_SearchCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) CreateGoods(ctx context.Context, in *CreateGoodsRequest, opts ...grpc.CallOption) (*CreateGoodsResponse, error) {
	out := new(CreateGoodsResponse)
	err := c.cc.Invoke(ctx, Goods_CreateGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) DeleteGoodsById(ctx context.Context, in *DeleteGoodsByIdRequest, opts ...grpc.CallOption) (*DeleteGoodsByIdResponse, error) {
	out := new(DeleteGoodsByIdResponse)
	err := c.cc.Invoke(ctx, Goods_DeleteGoodsById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) UpdateGoods(ctx context.Context, in *UpdateGoodsRequest, opts ...grpc.CallOption) (*UpdateGoodsResponse, error) {
	out := new(UpdateGoodsResponse)
	err := c.cc.Invoke(ctx, Goods_UpdateGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) SearchGoods(ctx context.Context, in *ListGoodsRequest, opts ...grpc.CallOption) (*ListGoodsResponse, error) {
	out := new(ListGoodsResponse)
	err := c.cc.Invoke(ctx, Goods_SearchGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) CreateGoodsSku(ctx context.Context, in *CreateGoodsSkuRequest, opts ...grpc.CallOption) (*CreateGoodsSkuResponse, error) {
	out := new(CreateGoodsSkuResponse)
	err := c.cc.Invoke(ctx, Goods_CreateGoodsSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) DeleteGoodsSkuById(ctx context.Context, in *DeleteGoodsSkuByIdRequest, opts ...grpc.CallOption) (*DeleteGoodsSkuByIdResponse, error) {
	out := new(DeleteGoodsSkuByIdResponse)
	err := c.cc.Invoke(ctx, Goods_DeleteGoodsSkuById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) UpdateGoodsSku(ctx context.Context, in *UpdateGoodsSkuRequest, opts ...grpc.CallOption) (*UpdateGoodsSkuResponse, error) {
	out := new(UpdateGoodsSkuResponse)
	err := c.cc.Invoke(ctx, Goods_UpdateGoodsSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetGoodsSkuByGoods(ctx context.Context, in *GetGoodsSkuByGoodsRequest, opts ...grpc.CallOption) (*GetGoodsSkuByGoodsResponse, error) {
	out := new(GetGoodsSkuByGoodsResponse)
	err := c.cc.Invoke(ctx, Goods_GetGoodsSkuByGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetGoodsSkuById(ctx context.Context, in *GetGoodsSkuByIdRequest, opts ...grpc.CallOption) (*GetGoodsSkuByIdResponse, error) {
	out := new(GetGoodsSkuByIdResponse)
	err := c.cc.Invoke(ctx, Goods_GetGoodsSkuById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsServer is the server API for Goods service.
// All implementations must embed UnimplementedGoodsServer
// for forward compatibility
type GoodsServer interface {
	Ping(context.Context, *Request) (*Response, error)
	// 分类
	CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error)
	DeleteCategoryById(context.Context, *DeleteCategoryByIdRequest) (*DeleteCategoryByIdResponse, error)
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error)
	SearchCategory(context.Context, *ListCategoryRequest) (*ListCategoryResponse, error)
	// 商品
	CreateGoods(context.Context, *CreateGoodsRequest) (*CreateGoodsResponse, error)
	DeleteGoodsById(context.Context, *DeleteGoodsByIdRequest) (*DeleteGoodsByIdResponse, error)
	UpdateGoods(context.Context, *UpdateGoodsRequest) (*UpdateGoodsResponse, error)
	SearchGoods(context.Context, *ListGoodsRequest) (*ListGoodsResponse, error)
	// 规格
	CreateGoodsSku(context.Context, *CreateGoodsSkuRequest) (*CreateGoodsSkuResponse, error)
	DeleteGoodsSkuById(context.Context, *DeleteGoodsSkuByIdRequest) (*DeleteGoodsSkuByIdResponse, error)
	UpdateGoodsSku(context.Context, *UpdateGoodsSkuRequest) (*UpdateGoodsSkuResponse, error)
	GetGoodsSkuByGoods(context.Context, *GetGoodsSkuByGoodsRequest) (*GetGoodsSkuByGoodsResponse, error)
	GetGoodsSkuById(context.Context, *GetGoodsSkuByIdRequest) (*GetGoodsSkuByIdResponse, error)
	mustEmbedUnimplementedGoodsServer()
}

// UnimplementedGoodsServer must be embedded to have forward compatible implementations.
type UnimplementedGoodsServer struct {
}

func (UnimplementedGoodsServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGoodsServer) CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedGoodsServer) DeleteCategoryById(context.Context, *DeleteCategoryByIdRequest) (*DeleteCategoryByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategoryById not implemented")
}
func (UnimplementedGoodsServer) UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedGoodsServer) SearchCategory(context.Context, *ListCategoryRequest) (*ListCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCategory not implemented")
}
func (UnimplementedGoodsServer) CreateGoods(context.Context, *CreateGoodsRequest) (*CreateGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoods not implemented")
}
func (UnimplementedGoodsServer) DeleteGoodsById(context.Context, *DeleteGoodsByIdRequest) (*DeleteGoodsByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoodsById not implemented")
}
func (UnimplementedGoodsServer) UpdateGoods(context.Context, *UpdateGoodsRequest) (*UpdateGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoods not implemented")
}
func (UnimplementedGoodsServer) SearchGoods(context.Context, *ListGoodsRequest) (*ListGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGoods not implemented")
}
func (UnimplementedGoodsServer) CreateGoodsSku(context.Context, *CreateGoodsSkuRequest) (*CreateGoodsSkuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoodsSku not implemented")
}
func (UnimplementedGoodsServer) DeleteGoodsSkuById(context.Context, *DeleteGoodsSkuByIdRequest) (*DeleteGoodsSkuByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoodsSkuById not implemented")
}
func (UnimplementedGoodsServer) UpdateGoodsSku(context.Context, *UpdateGoodsSkuRequest) (*UpdateGoodsSkuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoodsSku not implemented")
}
func (UnimplementedGoodsServer) GetGoodsSkuByGoods(context.Context, *GetGoodsSkuByGoodsRequest) (*GetGoodsSkuByGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsSkuByGoods not implemented")
}
func (UnimplementedGoodsServer) GetGoodsSkuById(context.Context, *GetGoodsSkuByIdRequest) (*GetGoodsSkuByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsSkuById not implemented")
}
func (UnimplementedGoodsServer) mustEmbedUnimplementedGoodsServer() {}

// UnsafeGoodsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsServer will
// result in compilation errors.
type UnsafeGoodsServer interface {
	mustEmbedUnimplementedGoodsServer()
}

func RegisterGoodsServer(s grpc.ServiceRegistrar, srv GoodsServer) {
	s.RegisterService(&Goods_ServiceDesc, srv)
}

func _Goods_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).CreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_DeleteCategoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).DeleteCategoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_DeleteCategoryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).DeleteCategoryById(ctx, req.(*DeleteCategoryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_SearchCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).SearchCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_SearchCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).SearchCategory(ctx, req.(*ListCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_CreateGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).CreateGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_CreateGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).CreateGoods(ctx, req.(*CreateGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_DeleteGoodsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGoodsByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).DeleteGoodsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_DeleteGoodsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).DeleteGoodsById(ctx, req.(*DeleteGoodsByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_UpdateGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).UpdateGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_UpdateGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).UpdateGoods(ctx, req.(*UpdateGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_SearchGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).SearchGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_SearchGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).SearchGoods(ctx, req.(*ListGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_CreateGoodsSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodsSkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).CreateGoodsSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_CreateGoodsSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).CreateGoodsSku(ctx, req.(*CreateGoodsSkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_DeleteGoodsSkuById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGoodsSkuByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).DeleteGoodsSkuById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_DeleteGoodsSkuById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).DeleteGoodsSkuById(ctx, req.(*DeleteGoodsSkuByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_UpdateGoodsSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodsSkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).UpdateGoodsSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_UpdateGoodsSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).UpdateGoodsSku(ctx, req.(*UpdateGoodsSkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetGoodsSkuByGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsSkuByGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodsSkuByGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_GetGoodsSkuByGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodsSkuByGoods(ctx, req.(*GetGoodsSkuByGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetGoodsSkuById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsSkuByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodsSkuById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_GetGoodsSkuById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodsSkuById(ctx, req.(*GetGoodsSkuByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Goods_ServiceDesc is the grpc.ServiceDesc for Goods service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Goods_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goods.Goods",
	HandlerType: (*GoodsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Goods_Ping_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _Goods_CreateCategory_Handler,
		},
		{
			MethodName: "DeleteCategoryById",
			Handler:    _Goods_DeleteCategoryById_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _Goods_UpdateCategory_Handler,
		},
		{
			MethodName: "SearchCategory",
			Handler:    _Goods_SearchCategory_Handler,
		},
		{
			MethodName: "CreateGoods",
			Handler:    _Goods_CreateGoods_Handler,
		},
		{
			MethodName: "DeleteGoodsById",
			Handler:    _Goods_DeleteGoodsById_Handler,
		},
		{
			MethodName: "UpdateGoods",
			Handler:    _Goods_UpdateGoods_Handler,
		},
		{
			MethodName: "SearchGoods",
			Handler:    _Goods_SearchGoods_Handler,
		},
		{
			MethodName: "CreateGoodsSku",
			Handler:    _Goods_CreateGoodsSku_Handler,
		},
		{
			MethodName: "DeleteGoodsSkuById",
			Handler:    _Goods_DeleteGoodsSkuById_Handler,
		},
		{
			MethodName: "UpdateGoodsSku",
			Handler:    _Goods_UpdateGoodsSku_Handler,
		},
		{
			MethodName: "GetGoodsSkuByGoods",
			Handler:    _Goods_GetGoodsSkuByGoods_Handler,
		},
		{
			MethodName: "GetGoodsSkuById",
			Handler:    _Goods_GetGoodsSkuById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods.proto",
}
